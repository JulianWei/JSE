import System;

string[] A, B, C;
string ra = "", rb = "", rc = "";

void main() {
	A = new string[] { "a", "b", "c", "c", "c", "d", "j", "k", "k", "o" };
	int length = remove(A);
	for (int i = 0; i < length; i++) {
		//Console.println(A[i] + ", ");
		ra += A[i];
	}
	//Console.println("==============");
	B = new string[] { "a", "b", "c", "c", "c", "d", "j", "k", "k", "o" };
	int lengthB = removeAnother(B);
	for (int i = 0; i < lengthB; i++) {
		//Console.println(B[i] + ", ");
		rb += B[i];
	}
	//Console.println("==============");
	C = new string[] { "a", "b", "c", "c", "c", "d", "j", "k", "k", "o" };
	int lengthC = removeII(C);
	for (int i = 0; i < lengthC; i++) {
		//Console.println(C[i] + ", ");
		rc += C[i];
	}
}

int remove(string[] A) {
	int length = A.length;
	if(length == 0) {
		return 0;
	}
	int i = 1;
	int j = 1;
	for (i = 1; i < length; i++) {
		if (A[i - 1] == A[i]) {
			// don't move j forward
			continue;
		} else {
			if (i == j) {
				// ignore
			} else {
				A[j] = A[i];
			}
			j++;
		}
	}

	return j;
}

int removeAnother(string[] A) {
	int length = A.length;
	if(length == 0) {
		return 0;
	}
	int j = 1;
	for (int i = 1; i < length; i++) {
		if (!(A[i - 1]==A[i])) {
			A[j] = A[i];
			j++;
		}
	}
	return j;
}

// Follow up for "Remove Duplicates": What if duplicates are allowed at most twice?
// For example, Given sorted array A = [1,1,1,2,2,3],
// Your function should return length = 5, and A is now [1,1,2,2,3].
int removeII(string[] A) {
	int length = A.length;
	int repeat = 0;
	int j = 1;
	for (int i = 1; i < length; i++) {
		if (!(A[j - 1]==A[i])) {
			// Console.println("processing i=" + i + ", j=" + j + ", A[i]=" + A[i] + ", A[j]=" + A[j]);
			A[j] = A[i];
			j++;

		} else {
			repeat++;
			if (repeat >= 2) {
				repeat = 0;
			} else {
				A[j] = A[i];
				j++;
				repeat++;
			}
		}
	}
	return j;
}

main();