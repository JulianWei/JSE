void merge(int[] a, int[] b, int low, int mid, int high) {
	int k = low;
	int begin1 = low;
	int end1 = mid;
	int begin2 = mid + 1;
	int end2 = high;
	while (k <= high) {
		if (begin1 > end1){
			b[k] = a[begin2];
			k++;
			begin2++;
		} else if (begin2 > end2) {
			b[k] = a[begin1];
			k++;
			begin1++;
		} else {
			if (a[begin1] <= a[begin2]){
				b[k] = a[begin1];
				k++;
				begin1++;
			} else {
				b[k] = a[begin2];
				k++;
				begin2++;
			}
		}
	}
}

void mergePass(int[] a, int[] b, int seg, int size) {
	int seg_start_ind = 0;
	while (seg_start_ind <= size - 2 * seg) {
		merge(a, b, seg_start_ind, seg_start_ind + seg - 1, seg_start_ind + seg * 2 - 1);
		seg_start_ind += 2 * seg;
	}
	
	if (seg_start_ind + seg < size)
		merge(a, b, seg_start_ind, seg_start_ind + seg - 1, size - 1);
	else
		for (int j = seg_start_ind; j < size; j++)
			b[j] = a[j];
}
	
void mergeSort(int[] a) {
	int size = a.length;
	int[] temp = new int[size];
	int seg = 1;
	while (seg < size) {
		mergePass(a, temp, seg, size);
		seg += seg;
		mergePass(temp, a, seg, size);
		seg += seg;
	}
}

int[] a = new int[]{ 3, 5, 3, 6, 4, 7, 5, 7, 4 };
mergeSort(a);

/*
string arr2str(int[] a){
	string s = "[";
	for(int i=0; i<a.length; i++){
		s += a[i];
		if(i+1<a.length){
			s += ", ";
		}
	}
	s += "]";
	return s;
}
dprint(arr2str(a));
//*/
