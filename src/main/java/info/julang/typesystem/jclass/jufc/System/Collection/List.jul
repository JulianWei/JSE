module System.Collection;

import System;
import System.Util;

/*
 * A list is a serial, self-scalable data structure that can grow its capacity on demand. 
 * This class is backed by a dynamically re-allocated platform array, which is not exposed 
 * through the API. The underlying implementation implies that the position-based operation 
 * can be costly, especially when the size grows significantly.
 *
 * The list is iterable with the following syntax:
 * [code]
 *    for (var a : list) {
 *      ... ... // can access element (a), but not update list
 *    }
 * [code: end]
 *
 * The methods of this class are thread safe.
 */
[Bridged(apiset="System.Collection.List")]
class List : Container, IIndexable, IIterable {

	/*
	 * Create a new and empty List object, with default capacity.
	 */
	[Bridged(name="ctor")]
	hosted List();
	
	/*
	 * Add an item at the end of the list. This operation increase the size by 1.
	 *
	 * [param: element] The element to add. This element can be null and of any type.
	 */
	[Bridged(name="add")]
	hosted void add(var element);
	
	/*
	 * Get the item at the specified index. 
	 *
	 * [throws: System.ArrayOutOfRangeException] When the index is out of range.
	 * [param: index] The index at which the item will be returned.
	 * [return] The value stored under this index.
	 */
	[Bridged(name="get")]
	hosted var get(int index);
	
	/*
	 * Set the item at the specified index. The index must be within the range of current size.
	 *
	 * [throws: System.ArrayOutOfRangeException] When the index is out of range.
	 * [param: index] The index at which the item will be returned.
	 */
	[Bridged(name="put")]
	hosted void put(int index, var value);
	
	/*
	 * Remove the item at the specified index. The index must be within the range of current size.
	 * Thie method will succeed even if the key doesn't exist.
	 *
	 * [throws: System.ArrayOutOfRangeException] When the index is out of range.
	 * [param: index] The index at which the item will be removed.
	 * [return] The removed item.
	 */
	[Bridged(name="remove")]
	hosted var remove(int index);
	
	/* 
	 * Sort this list in place.
	 *
	 * This method relies on all the elements being comparable to everyone else. Even if there is a single
	 * pair of elements that cannot be compared to each other, the whole sorting process may silently fail,
	 * immaturely abort, or end with nondeterministic results. 
	 *
	 * For primitive and built-in types, [string] and [char] are comparable to each other; [int], [byte] and 
	 * [float] are comparable among themselves. For an [Object] type, it must implement [IComparable](type: System.Util.IComparable)
	 * interface. The user must ensure that the implementation of this interface covers all the possible 
	 * types of elements that may be found in the list.
	 *
	 * [param: descending] if false, use the natural ascending order, i.e. the smaller values are placed 
	 * ahead of larger values; if true, reverse the order.
	 */
	[Bridged(name="sort")]
	hosted void sort(bool descending);
	
	/*
	 * [return] The size of list.
	 */
	int size() {
		return _size();
	}
	
	/*
	 * Convert to an array of [Any].
	 
	 * [return] A list of [Any].
	 */	
	var[] toArray() {
		int size = _size();
		var[] arr = new var[size];
		for (int i = 0; i < size; i++) {
			arr[i] = get(i);
		}
		
		return arr;
	}
		
	[Bridged(name="size")]
	private hosted int _size();
	
	// This method is only called by the platform code
	private static int _compareObjs(var a, var b) {
		if (a is IComparable) {
			return a.compare(b);
		} else if (b is IComparable) {
			return -b.compare(a);
		}
		
		return 0;
	}
	
	// IIndexable
	
	var at(var index){
		if (index is int) {
			return get((int)index);
		} else {
			throw new ArgumentException("An index to list must be a non-negative integer.");
		}
	}
	
	void at(var index, var value){
		if (index is int) {
			put((int)index, value);
		} else {
			throw new ArgumentException("An index to list must be a non-negative integer.");
		}
	}
	
	// IIterable
	
	IIterator getIterator(){
		return new ListIterator(this);
	}
}

internal class ListIterator : IIterator {

	private List list;
	private int index;
	
	ListIterator(List list){
		this.list = list;
	}
	
	bool hasNext() {		
		return index < list.size();
	}
	
	var next() {
		var v = list[index];
		index++;
		return v;
	}
}