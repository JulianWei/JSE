package $tv_pkgname;

import java.util.ArrayList;
import java.util.List;

import info.julang.interpretation.syntax.ClassSubtype;
import info.julang.interpretation.syntax.ParsedTypeName;
import info.julang.modulesystem.RequirementInfo;
import info.julang.modulesystem.naming.FQName;
import info.julang.modulesystem.prescanning.LazyClassDeclInfo;
import info.julang.modulesystem.prescanning.RawClassInfo;
import info.julang.modulesystem.prescanning.RawScriptInfo;
import info.julang.parser.LazyAstInfo;
import info.julang.typesystem.jclass.Accessibility;
import info.julang.typesystem.jclass.jufc.FoundationClassParser;

#* Parameters:
    tv_pkgname
    tv_classname
    tv_requirments
    tv_moduleName
    tv_scriptFilePath
    tv_raw_classes *#
/**
 * This source file is automatically generated.
 */
public class $tv_classname extends RawScriptInfo {
    
    private List<RequirementInfo> m_requirements;
    private List<RawClassInfo> m_classes;
    
    public $tv_classname () {
        FoundationClassParser parser = new FoundationClassParser("$tv_scriptFilePath");
        ainfo = new LazyAstInfo(parser, "$tv_scriptFilePath", null);
        
        m_classes = new ArrayList<RawClassInfo>();
#foreach( $raw_class in $tv_raw_classes )
        #set( $class_decl = $raw_class.DeclInfo )
        #set( $tv_jv_class_name = "AOTClassDeclInfo_$class_decl.Name" )
        m_classes.add(new RawClassInfo("$class_decl.Name", new $tv_jv_class_name (this)));
#end

        m_requirements = new ArrayList<RequirementInfo>();
#foreach( $requirement in $tv_requirments )
#if( $requirement.Alias == $null)
        m_requirements.add(new RequirementInfo("$requirement.Name", null));
#else
        m_requirements.add(new RequirementInfo("$requirement.Name", "$requirement.Alias"));
#end
#end
    }

    public String getModuleName() {
        return "$tv_moduleName";
    }

    public List<RequirementInfo> getRequirements() {
        return m_requirements;
    }

    public List<RawClassInfo> getClasses() {
        return m_classes;
    }

    public String getScriptFilePath() {
        return "$tv_scriptFilePath";
    }
    
    // Types declared in this script //
#foreach( $raw_class in $tv_raw_classes )
    #*
    tv_jv_class_name
    tv_jul_class_name
    tv_class_subtype
    tv_is_final
    tv_is_const
    tv_is_hosted
    tv_is_abstract
    tv_is_static
    tv_accessibility
    *#
    #set( $class_decl = $raw_class.DeclInfo )
    #set( $tv_jv_class_name = "AOTClassDeclInfo_$class_decl.Name" )
    #set( $tv_jul_full_class_name = "$tv_moduleName.$class_decl.Name" )
    #set( $tv_jul_class_name = $class_decl.Name )
    #set( $tv_class_subtype = $class_decl.Subtype )
#if( $class_decl.ParentTypes )
    #set( $tv_parent_types = $class_decl.ParentTypes )
#else
    #set( $tv_parent_types = [] )
#end
    #set( $tv_is_final = $class_decl.Final )
    #set( $tv_is_const = $class_decl.Const )
    #set( $tv_is_hosted = $class_decl.Hosted )
    #set( $tv_is_static = $class_decl.Static )
    #set( $tv_is_abstract = $class_decl.Abstract )
#if( $class_decl.Accessibility == "" )
    #set( $tv_accessibility = $null )
#else
    #set( $tv_accessibility = $class_decl.Accessibility )
#end
    #parse( "templates/AOTClassDeclInfo.vm" )
#end
}